/*
 * GNU General Public License v3.0
 *
 * Copyright (c) 2020, Miguel Gamboa (gamboa.pt)
 *
 *   All rights granted under this License are granted for the term of
 * copyright on the Program, and are irrevocable provided the stated
 * conditions are met.  This License explicitly affirms your unlimited
 * permission to run the unmodified Program.  The output from running a
 * covered work is covered by this License only if the output, given its
 * content, constitutes a covered work.  This License acknowledges your
 * rights of fair use or other equivalent, as provided by copyright law.
 *
 *   You may make, run and propagate covered works that you do not
 * convey, without conditions so long as your license otherwise remains
 * in force.  You may convey covered works to others for the sole purpose
 * of having them make modifications exclusively for you, or provide you
 * with facilities for running those works, provided that you comply with
 * the terms of this License in conveying all material for which you do
 * not control copyright.  Those thus making or running the covered works
 * for you must do so exclusively on your behalf, under your direction
 * and control, on terms that prohibit them from making any copies of
 * your copyrighted material outside their relationship with you.
 *
 *   Conveying under any other circumstances is permitted solely under
 * the conditions stated below.  Sublicensing is not allowed; section 10
 * makes it unnecessary.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pt.isel.mpd;

import org.junit.Assert;
import org.junit.Test;

import java.util.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static pt.isel.mpd.util.LazyQueries.*;

public class LazyQueriesTest {

    @Test
    public void testCache() {
        Random r = new Random();
        Iterable<Integer> nrs = generate(() -> r.nextInt(100));
        nrs = cache(nrs);
        Object[] expected = toArray(limit(nrs, 10));
        Object[] actual = toArray(limit(nrs, 10));
        Assert.assertArrayEquals(expected, actual);
    }


    /*
    * Factory
    */

    @Test
    public void testIterateNaturalNumbers() {
        Iterator<Integer> nrs = iterate(0, n -> ++n).iterator();
        for (int i = 0; i < 5; i++) {
            Assert.assertEquals( i, nrs.next().intValue());
        }
    }

    @Test
    public void testGenerateRandomIntegers() {
        Random rand = new Random();
        Iterator<Integer> nrs = generate(rand::nextInt).iterator();
        System.out.println(nrs.next());
        System.out.println(nrs.next());
        System.out.println(nrs.next());
    }

    int init;
    @Test
    public void testGenerateEvenIntegers() {
        Iterator<Integer> expected = Arrays.asList(0, 2, 4, 6).iterator();
        init = 0;
        Iterable<Integer> actual = limit(filter(generate(() -> init++), n -> n % 2 == 0), 4);
        actual.forEach(curr -> assertEquals(expected.next(), curr));
        assertFalse(expected.hasNext());
    }

    @Test
    public void testFlatMapOfStringsToChars() {
        Iterable<String> strings = Arrays.asList("abc", "", "defg", "hijkl");
        Iterator<Character> expected = Arrays.asList('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l').iterator();

        for (Character curr : flatMap(strings, this::getChars)) {
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());

    }

    @Test
    public void testFlatMapOfEmptyList() {
        Iterable<String> strings = Collections.emptyList();
        Iterator<Character> it = flatMap(strings, this::getChars).iterator();
        assertFalse(it.hasNext());
    }


    private Iterable<Character> getChars(String str) {
        return () -> new Iterator<>() {
            String s = str;
            int idx;

            @Override
            public boolean hasNext() {
                return idx < str.length();
            }

            @Override
            public Character next() {
                return str.charAt(idx++);
            }
        };
    }

    /*
     * Intermediate
     */

    @Test
    public void testFilterEvenNumbers() {
        Iterable<Integer> nrs = Arrays.asList(1, 2, 3, 4, 5, 6, 7);
        Iterator<Integer> expected = Arrays.asList(2, 4, 6).iterator();

        for (Integer curr : filter(nrs, n -> n % 2 == 0)) {
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());
    }

    @Test
    public void testLimit() {
        Iterable<Integer> nrs = Arrays.asList(1, 2, 3, 4, 5, 6, 7);
        Iterator<Integer> expected = Arrays.asList(1, 2, 3, 4).iterator();

        for (Integer curr : limit(nrs, 4)) {
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());
    }

    @Test
    public void testSkip() {
        Iterable<Integer> nrs = Arrays.asList(1, 2, 3, 4, 5, 6, 7);
        Iterator<Integer> expected = Arrays.asList(3, 4, 5, 6, 7).iterator();

        for (Integer curr : skip(nrs, 2)) {
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());
    }

    @Test
    public void testMapToDoubleTheValue() {
        Iterable<Integer> nrs = Arrays.asList(1, 2, 3, 4, 5);
        Iterator<Integer> expected = Arrays.asList(2, 4, 6, 8, 10).iterator();

        for (Integer curr : map(nrs, n -> n * 2)) {
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());
    }

    @Test
    public void testFullSkip() {
        Iterable<Integer> nrs = Arrays.asList(1, 2, 3, 4, 5, 6, 7);
        Iterator<Integer> actual = skip(nrs, 7).iterator();
        assertFalse(actual.hasNext());
    }

    @Test
    public void testTakeWhileEven() {
        Iterable<Integer> nrs = Arrays.asList(2, 4, 6, 7, 8);
        Iterator<Integer> expected = Arrays.asList(2, 4, 6).iterator();

        for (Integer curr : takeWhile(nrs, n -> n % 2 == 0)) {
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());
    }

    /*
     * Terminal
     */

    @Test
    public void testMax() {
        Iterable<Integer> nrs = Arrays.asList(2, 1, 3, 7, 5, 6, 4);
        Optional<Integer> box = max(nrs);
        box.ifPresentOrElse(
                n -> assertEquals(7, n.intValue()),
                Assert::fail
        );
    }

    @Test
    public void testFirst() {
        Iterable<Integer> nrs = Arrays.asList(1,2,3,4,5);
        Optional<Integer> box = first(nrs);
        box.ifPresentOrElse(
                n -> assertEquals(1, n.intValue()),
                Assert::fail
        );
    }

    @Test
    public void testLast() {
        Iterable<Integer> nrs = Arrays.asList(1,2,3,4,5);
        Optional<Integer> box = last(nrs);
        box.ifPresentOrElse(
                n -> assertEquals(5, n.intValue()),
                Assert::fail
        );
    }

    @Test
    public void testCount() {
        Iterable<Integer> nrs = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7);
        int count = count(nrs);
        Assert.assertEquals(8, count);
    }

    @Test
    public void testToArray() {
        Iterable<Integer> nrs = Arrays.asList(1, 2, 3, 4, 5, 6);
        Object[] expected_array = {1, 2, 3, 4, 5, 6};
        Object[] nrs_array = toArray(nrs);

        Assert.assertEquals(nrs_array.length, expected_array.length);
        for (int i = 0; i < nrs_array.length ; i++) {
            assertEquals(nrs_array[i], expected_array[i]);
        }
    }
}
